// prisma/schema.prisma


// This is your Prisma schema file,

// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  role           String
  department     String
  phoneNumber    String?   @unique
  profilePicture String?
  createdAt      DateTime @default(now())
  Documents         Documents[] @relation("authorized_users")
  Documents_created Documents[] @relation("author")

  messages ChatMessage[]
  groups   GroupMember[]

  Folders Folders[] @relation("author")
}

model Invite {
  id          String   @id @default(uuid())
  email       String   @unique
  role        String
  department  String
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Documents {
  id               String   @id @default(uuid())
  file_name        String   @db.VarChar(512)
  path             String   @db.VarChar(512)
  mime_type        String   @db.VarChar(512)
  native           Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // relations
  author_id           String
  author  User @relation( "author", fields: [author_id], references: [id])
  folder_id        String?
  folder           Folders? @relation(fields: [folder_id], references: [id])
  authorized_users User[]   @relation("authorized_users")
}

model Folders {
  id   String @id @default(uuid())
  name String @db.VarChar(512)
  path String @db.VarChar(512)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  author_id String
  author    User        @relation("author", fields: [author_id], references: [id])
  Documents Documents[]
}



model ChatMessage {
  id        String   @id @default(uuid())
  content   String?
  senderId  String
  groupId   String?  // null means private/direct message
  createdAt DateTime @default(now())
  attachmentUrl String?

  sender    User     @relation(fields: [senderId], references: [id])
  group     ChatGroup? @relation(fields: [groupId], references: [id])
}

model ChatGroup {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  
  messages  ChatMessage[]
  members   GroupMember[]
}

model GroupMember {
  id       String   @id @default(uuid())
  groupId  String
  userId   String
  joinedAt DateTime @default(now())

  group    ChatGroup @relation(fields: [groupId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
}
